use crate::solutions::{Solution, answer::Answer};

pub struct DayX;

impl Solution for DayX {
    fn solve_a(&self, input: &str) -> Option<Answer> {
        None
    }

    fn solve_b(&self, input: &str) -> Option<Answer> {
        None
    }
}

#[cfg(test)]
mod test {
    use advent_of_code_client::{AocClient, Problem, Year};

    use super::*;

    const PROBLEM: Problem = Problem::new(Year::Y2023, X);
    const INPUT: &str = r#""#;

    #[test]
    fn test_a() {
        assert_eq!(DayX {}.solve_a(INPUT), Some(Answer::UInt(todo!())));
    }

    #[test]
    fn solve_a() {
        let input = AocClient::default().get_input(PROBLEM).unwrap();
        assert_eq!(DayX {}.solve_a(&input), Some(Answer::UInt(todo!())));
    }

    #[test]
    fn test_b() {
        assert_eq!(DayX {}.solve_b(INPUT), Some(Answer::UInt(todo!())));
    }

    #[test]
    fn solve_b() {
        let input = AocClient::default().get_input(PROBLEM).unwrap();
        assert_eq!(DayX {}.solve_b(&input), Some(Answer::UInt(todo!())));
    }
}
